generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  APPROVED
}

enum Role {
  USER
  TELECONSULTER
  HEALTHCARE_FACILITY
  PHARMACY
  ADMIN
}

model User {
  id                  Int                @id @default(autoincrement())
  firstName           String?
  lastName            String?
  email               String             @unique
  password            String
  location            String?
  phone               String?
  role                Role               @default(USER)
  status              Status             @default(PENDING) // New status field
  appointments        Appointment[]
  teleconsultations   Teleconsultation[]
  notifications       Notification[]
  transactions        Transaction[]
  sessions            Session[]
  feedback            Feedback[]
  prescriptions       Prescription[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  healthcareFacility  HealthcareFacility? @relation(fields: [healthcareFacilityId], references: [id])
  healthcareFacilityId Int?               @unique // Make this field unique for one-to-one relation
}

model HealthcareFacility {
  id           Int      @id @default(autoincrement())
  name         String
  location     String
  services     String   // Changed from String[] to String (comma-separated values)
  hours        String
  contact      String
  type         String
  user         User?    @relation
  appointments Appointment[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Pharmacy {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  contact   String
  hours     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id                 Int                @id @default(autoincrement())
  date               DateTime
  userId             Int
  facilityId         Int
  teleconsultationId Int?
  status             String
  transactions       Transaction[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  user               User               @relation(fields: [userId], references: [id])
  facility           HealthcareFacility @relation(fields: [facilityId], references: [id])
  teleconsultation   Teleconsultation?  @relation(fields: [teleconsultationId], references: [id])

  @@index([userId])
  @@index([facilityId])
  @@index([teleconsultationId])
}

model MedicalInformation {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  keywords  String   // Changed from String[] to String (comma-separated values)
  category  String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model EmergencyService {
  id        Int      @id @default(autoincrement())
  name      String
  contact   String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HealthTip {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  category  String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teleconsultation {
  id           Int           @id @default(autoincrement())
  date         DateTime
  userId       Int
  doctor       String
  status       String
  transactions Transaction[]
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Transaction {
  id                 Int                @id @default(autoincrement())
  userId             Int
  appointmentId      Int?
  teleconsultationId Int?
  txRef              String             @unique
  status             String
  amount             Float
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  user               User               @relation(fields: [userId], references: [id])
  appointment        Appointment?       @relation(fields: [appointmentId], references: [id])
  teleconsultation   Teleconsultation?  @relation(fields: [teleconsultationId], references: [id])

  @@index([userId])
  @@index([appointmentId])
  @@index([teleconsultationId])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Prescription {
  id        Int      @id @default(autoincrement())
  userId    Int
  doctor    String
  medicines String   // Changed from String[] to String (comma-separated values)
  dosage    String   // Changed from String[] to String (comma-separated values)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
